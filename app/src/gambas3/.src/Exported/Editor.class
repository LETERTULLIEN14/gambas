' Gambas class file

Export

Private $iStartLine As Integer
Private $iStartColumn As Integer
Private $iEndLine As Integer
Private $iEndColumn As Integer

Private $hLabel As TextLabel
Private $hLabelTimer As Timer
Private $hObserver As Observer

Public Sub _new()
  
  $hObserver = New Observer(Me) As "Editor"
  
End


Public Sub GetPosition() As Integer
  
  Dim iLine, iColumn, iInd, iPos As Integer
  
  If Me.Selected Then 
    iLine = Me.Selection.StartLine
    iColumn = Me.Selection.StartColumn
  Else
    iLine = Me.Line
    iColumn = Me.Column
  Endif
  
  For iInd = 0 To iLine - 1
    iPos += Len(Me.Lines[iInd].Text) + 1
  Next
  iPos += Len(String.Left(Me.Lines[iLine].Text, iColumn))
  
  Return iPos
  
End

Public Sub SetPosition(hFindResult As CFindResult, bJustCheck As Boolean) As Boolean
  
  Dim iLine, iColumn As Integer
  Dim iLen As Integer
  Dim sLine As String
  Dim iPos As Integer
  
  ' If hFindResult.Line Or If hFindResult.Column Then
  ' 
  '   iLine = hFindResult.Line
  '   iColumn = hFindResult.Column
  '   sLine = Me.Lines[iLine].Text
  ' 
  ' Else
  
    iPos = hFindResult.Pos
    While iLine < Me.Lines.Count
    
      iLen = Len(Me.Lines[iLine].Text)
      If iPos <= iLen Then Break
      iPos -= iLen + 1
      Inc iLine
      
    Wend
  
    sLine = Me.Lines[iLine].Text
    iColumn = String.Len(Left$(sLine, iPos))
    
  'Endif
  
  If Me.Highlight <> Highlight.None Then
    If InStr(String.Mid$(Me.Lines[iLine].Purge(Not FSearch.IgnoreComments, Not FSearch.IgnoreStrings, Chr$(1)), iColumn + 1, hFindResult.Length), Chr$(1)) Then Return True
  Endif
  
  hFindResult.Line = iLine
  hFindResult.Column = iColumn
  
  If bJustCheck Then 
    If iColumn >= 40 And If Me.Lines[iLine].Length > 80 Then
      sLine = "â€¦" & Html(String.Mid$(sLine, iColumn - 31, 32)) & "<u>" & Html(String.Mid$(sLine, iColumn + 1, hFindResult.Length)) & "</u>" & Html(String.Mid$(sLine, iColumn + hFindResult.Length + 1, 160))
    Else
      sLine = Html(String.Left(sLine, iColumn)) & "<u>" & Html(String.Mid$(sLine, iColumn + 1, hFindResult.Length)) & "</u>" & Html(String.Mid$(sLine, iColumn + hFindResult.Length + 1, 160))
    Endif
    sLine = Replace(sLine, " ", "&nbsp;")
    hFindResult.Text = "<nobr>" & sLine
  Else
    Me.Lines[iLine].Expanded = True
    Me.Goto(iLine, iColumn, True)
    Me.Select(iLine, iColumn, iLine, iColumn + hFindResult.Length)
  Endif
  
End

Public Sub Replace(sReplace As String)
  
  Dim iLine, iColumn As Integer
  
  If Not Me.Selected Then Return
  
  iLine = Me.Selection.StartLine
  iColumn = Me.Selection.StartColumn
  Me.Begin
  Me.Insert(sReplace)
  Me.Select(iLine, iColumn, iLine, iColumn + String.Len(sReplace))
  Me.End  
  
End

Public Sub GetSelection() As String
  
  If Me.Selected And If Me.Selection.StartLine = Me.Selection.EndLine Then
    Return Me.Selection.Text
  Endif
  
End

Static Public Sub GetIndent(sLine As String) As Integer
  
  Return Len(sLine) - Len(LTrim(sLine))
  
End


Public Sub ReadConfig()

  Dim iLimit As Integer
  
  Project.SetEditorFont(Me)

  MTheme.InitEditor(Me)

  iLimit = Settings["/Editor/ProcedureLimit", 2]
  Me.Flags[Editor.ShowLimits] = iLimit > 0 And iLimit < 3
  Me.Flags[Editor.BlendedLimits] = iLimit = 2
  Me.Flags[Editor.BackgroundLimits] = iLimit = 3
  Me.Flags[Editor.ShowModifiedLines] = Settings["/Editor/ShowChange", True]
  Me.Flags[Editor.ShowLineNumbers] = Settings["/Editor/ShowLineNumbers", False]
  Me.Flags[Editor.ShowCurrentLine] = Settings["/Editor/ShowCurrent", True]
  Me.Flags[Editor.ShowDots] = Settings["/Editor/ShowDots", True]
  Me.Flags[Editor.NoFolding] = Not Settings["/Editor/ShowFolding", True]
  Me.Flags[Editor.HighlightBraces] = True
  
  Me.KeywordsUseUpperCase = Settings["/Editor/KeywordsUseUpperCase"]
  
End

Public Sub StoreSelection(Optional bNoFullLines As Boolean)

  With Me
    
    $iStartLine = .Selection.StartLine
    $iStartColumn = .Selection.StartColumn
    $iEndLine = .Selection.EndLine
    $iEndColumn = .Selection.EndColumn
    
    If Not bNoFullLines Then 
      If $iEndColumn > 0 Or Not .Selected Then 
        Inc $iEndLine
        $iEndColumn = 0
        $iStartColumn = 0
        RecallSelection
      Endif
    Endif
    
  End With
  

End

Public Sub RecallSelection()

  Me.Select($iStartLine, $iStartColumn, $iEndLine, $iEndColumn)

End

Public Sub LabelTimer_Timer()

  If $hLabel.Visible Then
    $hLabel.Hide
    $hLabelTimer.Stop
  Endif

End

Public Sub Label_MouseDown()

  LabelTimer_Timer

End


Public Sub ShowMessageLabel(sStr As String, X As Integer, Y As Integer, Optional bError As Boolean)

  Dim hParent As Container

  If Not $hLabel Then
    hParent = Me.Parent
    If hParent Is HSplit Or If hParent Is VSplit Then hParent = hParent.Parent
    
    $hLabel = New TextLabel(hParent) As "Label"
    $hLabel.Ignore = True
    $hLabel.AutoResize = True
    $hLabel.Border = Border.Plain
    $hLabel.Padding = 2
    $hLabel.Wrap = False
    $hLabelTimer = New Timer As "LabelTimer"
    $hLabelTimer.Delay = 10000
  Endif

  X = Me.ScreenX + X - $hLabel.Parent.ScreenX
  Y = Me.ScreenY + Y - $hLabel.Parent.ScreenY
  
  $hLabel.Foreground = Me.Styles[Highlight.Normal].Foreground
  If bError Then
    $hLabel.Background = Color.Merge(Me.Styles[Highlight.Breakpoint].Foreground, Style.BackgroundOf(Me), 0.3)
  Else
    $hLabel.Background = Color.Merge(Me.Styles[Highlight.CurrentLine].Foreground, Style.BackgroundOf(Me), 0.3)
  Endif
  $hLabel.Text = Replace(Replace(sStr, "<p>", " "), "<br>", " ")

  If (Y + $hLabel.H) > $hLabel.Parent.ClientH Then Y -= $hLabel.H + Me.LineHeight
  $hLabel.Move(X, Y)
  
  $hLabel.Show
  $hLabel.Raise
  $hLabelTimer.Stop
  $hLabelTimer.Start
  Me.SetFocus

End

Public Sub Editor_Cursor()
  
  Try $hLabel.Hide
  
End


Public Sub Editor_Scroll()
  
  Try $hLabel.Hide
  
End

Public Sub HideMessageLabel()
  
  Try $hLabel.Hide
  
End

Private Sub ToggleAroundCurrentWord(sIdentCar As String, sBraces As String)

  Dim sLine As String
  Dim X1, X2 As Integer
  Dim iLen As Integer
  
  sLine = Me.Lines[Me.Line].Text
  iLen = Me.Lines[Me.Line].Length
  
  X1 = Me.Column
  While X1 > 0
    If InStr(sIdentCar, String.Mid$(sLine, X1, 1)) = 0 Then Break
    Dec X1
  Wend
  
  X2 = Me.Column
  While X2 < iLen
    If InStr(sIdentCar, String.Mid$(sLine, X2 + 1, 1)) = 0 Then Break
    Inc X2
  Wend
  
  If X1 = X2 Then Return
  
  If X1 >= 1 And If String.Mid$(sLine, X1, 1) = Left(sBraces) And If X2 < iLen And If String.Mid$(sLine, X2 + 1, 1) = Right(sBraces) Then
    sLine = String.Left(sLine, X1 - 1) & String.Mid$(sLine, X1 + 1, X2 - X1) & String.Mid$(sLine, X2 + 2)
    X1 = Me.Column - 1
  Else
    sLine = String.Left(sLine, X1) & Left(sBraces) & String.Mid$(sLine, X1 + 1, X2 - X1) & Right$(sBraces) & String.Mid$(sLine, X2 + 1)
    X1 = Me.Column + 1
  Endif
  
  Me.Lines[Me.Line].Text = sLine
  Me.Goto(Me.Line, X1)
  
End

Public Sub Editor_KeyPress()
  
  Dim sBraces As String
  
  If Key.Alt Then
  
    For Each sBraces In ["()", "{}", "[]", "<>"]
      If InStr(sBraces, Key.Text) Then
        ToggleAroundCurrentWord(FEditor.IDENT_CAR, sBraces)
        Stop Event
        Return
      Endif
    Next
    
  Endif
  
End
