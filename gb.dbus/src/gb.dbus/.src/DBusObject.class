' Gambas class file

Export

Static Public _ObjectCache As New Collection

Static Private $cType As Collection = [
  "b": "b", 
  "c": "y", 
  "h": "n",
  "i": "i",
  "l": "x",
  "p": "x",
  "g": "d",
  "f": "d",
  "d": "d",
  "s": "s",
  "v": "v",
  "DBusObject": "o",
  "Collection": "a{sv}",
  "Boolean[]": "ab",
  "Byte[]": "ay",
  "Short[]": "an",
  "Integer[]": "ai",
  "Long[]": "ax",
  "Pointer[]": "ax",
  "Single[]": "ad",
  "Float[]": "ad",
  "Date[]": "ad",
  "String[]": "as",
  "Variant[]": "av"]
  
Static Private $sName As String

Private $sPath As String
Private $sInterface As String
Private $aInterface As String[]
Private $aChildren As String[]
Private $hObserver As DBusObserver
Private $iRegister As Integer
Private $bRegisterParent As Boolean

Static Private Sub ConvType(sType As String) As String
  
  Return $cType[sType]
  
End

Public Sub _AddChild(sChild As String)
  
  If Not $aChildren Then $aChildren = New String[]
  $aChildren.Add(sChild)
  
End

Public Sub _GetPath() As String
  
  Return $sPath
  
End


Public Sub _Register(hConnection As DBusConnection, sPath As String, Optional aInterface As String[])
  
  Dim hParent As DBusObject
  Dim sParent As String
  
  Inc $iRegister
  If $iRegister > 1 Then Return
  
  If Not $sName Then $sName = DBus._RegisterApplication(hConnection)
  
  If Left(sPath) <> "/" Then sPath = "/" & sPath
  
  If _ObjectCache.Exist(sPath) Then Return
  
  $sPath = sPath
  
  $sInterface = $sName & "." & DBus._Normalize(Object.Class(Me).Name)
  If aInterface Then $aInterface = aInterface.Copy()
  'Debug $sPath;; $sInterface
  
  _ObjectCache[sPath] = Me
  
  If sPath <> "/" Then
    
    sParent = File.Dir(sPath)
    hParent = _ObjectCache[sParent]
    If Not hParent Then
      $bRegisterParent = True
      hParent = New DBusObject
      hParent._Register(hConnection, sParent)
    Endif
  
    hParent._AddChild(File.Name(sPath))
    
  Endif
  
  $hObserver = New DBusObserver(hConnection, DBus.Method, sPath) As "DBusObserver"
  
End

Public Sub _Unregister(hConnection As DBusConnection)
  
  Dim sChild As String
  Dim hChild As DBusObject
  Dim sParent As String
  Dim hParent As DBusObject
  
  Dec $iRegister
  If $iRegister > 0 Then Return
  
  If $bRegisterParent Then
    
    $bRegisterParent = False
    sParent = File.Dir($sPath)
    hParent = _ObjectCache[sParent]
    If hParent Then
      hParent._Unregister(hConnection)
      Return
    Endif
    
  Endif
  
  If $aChildren Then
    For Each sChild In $aChildren
      hChild = _ObjectCache[$sPath &/ sChild]
      hChild._Unregister(hConnection)
    Next
  Endif
  
  $hObserver = Null
  _ObjectCache[$sPath] = Null
  $sPath = ""
  If _ObjectCache.Count = 0 Then 
    DBus._UnregisterApplication(hConnection)
    $sName = ""
  Endif
  
End

Public Sub _Introspect() As String
  
  Dim sRes As String
  Dim sChild As String
  Dim sSymbol As String
  Dim hClass As Class
  Dim bHasProperty As Boolean
  Dim bHasMethod As Boolean
  Dim sType As String
  Dim sSign As String
  Dim sArg As String
  Dim sOne As String
  Dim iPos As Integer
  Dim iInd As Integer
  Dim cDescInterface As New Collection
  Dim sDesc As String
  Dim sInterface As String
  Dim sPrefix As String
  
  sRes &= "<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\" \"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\">\n"
  sRes &= "<node>\n"
  
  sRes &= "  <interface name=\"org.freedesktop.Introspectable\">\n"
  sRes &= "    <method name=\"Introspect\">\n"
  sRes &= "      <arg name=\"xml_data\" type=\"s\" direction=\"out\"/>\n"
  sRes &= "    </method>\n"
  sRes &= "  </interface>\n"
  
  
  hClass = Object.Class(Me)
  
  For Each sSymbol In hClass.Symbols
    With hClass[sSymbol]
      If InStr(sSymbol, "_") Then Continue
      If .Static Then Continue
      If .Kind = Class.Property Then 
        bHasProperty = True
      Else If .Kind = Class.Method Then
        bHasMethod = True
      Endif
    End With
  Next
  
  If bHasProperty Then
    sRes &= "  <interface name=\"org.freedesktop.DBus.Properties\">\n"
    sRes &= "    <method name=\"Get\">\n"
    sRes &= "      <arg name=\"interface_name\" type=\"s\" direction=\"in\"/>\n"
    sRes &= "      <arg name=\"property_name\" type=\"s\" direction=\"in\"/>\n"
    sRes &= "      <arg name=\"value\" type=\"v\" direction=\"out\"/>\n"
    sRes &= "    </method>\n"
    sRes &= "    <method name=\"Set\">\n"
    sRes &= "      <arg name=\"interface_name\" type=\"s\" direction=\"in\"/>\n"
    sRes &= "      <arg name=\"property_name\" type=\"s\" direction=\"in\"/>\n"
    sRes &= "      <arg name=\"value\" type=\"v\" direction=\"in\"/>\n"
    sRes &= "    </method>\n"
    sRes &= "    <method name=\"GetAll\">\n"
    sRes &= "      <arg name=\"interface_name\" type=\"s\" direction=\"in\"/>\n"
    sRes &= "      <arg name=\"values\" type=\"a{sv}\" direction=\"out\"/>\n"
    sRes &= "    </method>\n"
    sRes &= "  </interface>\n"
  Endif
  
  For Each sSymbol In hClass.Symbols
    
    With hClass[sSymbol]
      
      If .Static Then Continue
    
      sPrefix = ""
      If $aInterface Then
        For Each sInterface In $aInterface
          sPrefix = LCase(Replace(sInterface, ".", "_") & "_")
          If LCase(sSymbol) Begins sPrefix And RInStr(sSymbol, "_") <= Len(sPrefix) Then Break
          sPrefix = ""
        Next
      Endif
      
      sSymbol = Mid$(sSymbol, Len(sPrefix) + 1)
      If InStr(sSymbol, "_") Then Continue
      
      sDesc = ""
      
      sType = ""
      
      If .Type Then
        sType = ConvType(.Type)
        If Not sType Then Continue
      Endif
          
      Select Case .Kind

        Case Class.Method

          sArg = ""
          iInd = 0
            
          sSign = .Signature
          If sSign Then
            While sSign
              If IsLCase(Left(sSign)) Then
                sOne = ConvType(Left(sSign))
                sSign = Mid$(sSign, 2)
              Else
                iPos = InStr(sSign, ";")
                If iPos Then
                  sOne = Left(sSign, iPos - 1)
                  sSign = Mid$(sSign, iPos + 1)
                Else
                  sOne = sSign
                  sSign = ""
                Endif
                sOne = ConvType(sOne)
              Endif
              If Not sOne Then
                sArg = ""
                Break
              Endif
              
              Inc iInd
              sArg &= "      <arg name=\"arg" & CStr(iInd) & "\" type=\"" & sOne & "\" direction=\"in\"/>\n"
              
            Wend
            
            If Not sArg Then Continue
          Endif
          
          sDesc &= "    <method name=\"" & sSymbol & "\">\n"
          
          If sArg Then sDesc &= sArg
          
          If sType Then
            sDesc &= "      <arg name=\"value\" type=\"" & sType & "\" direction=\"out\"/>\n"
          Endif
          
          sDesc &= "    </method>\n"
          
        Case Class.Property
          
          sDesc &= "    <property name=\"" & sSymbol & "\" type=\"" & sType & "\" access=\"" & If(.ReadOnly, "read", "readwrite") & "\"/>\n"

      End Select
    End With
    
    If sPrefix Then
      cDescInterface[sInterface] &= sDesc
    Else
      cDescInterface[$sInterface] &= sDesc
    Endif
      
  Next
  
  For Each sDesc In cDescInterface
    sRes &= "  <interface name=\"" & cDescInterface.Key & "\">\n" & sDesc & "  </interface>\n"
  Next
  
  If $aChildren Then
    For Each sChild In $aChildren.Sort()
      sRes &= "  <node name=\"" & sChild & "\"/>\n"
    Next
  Endif
  
  sRes &= "</node>\n"
  
  Return sRes
  
End

Private Sub GetProperty()
  
  Dim sInterface As String
  Dim sProperty As String
  
  With $hObserver.Message
  
    sInterface = .Arguments[0]
    sProperty = .Arguments[1]
    
    If $aInterface And If sInterface <> $sInterface Then
      sProperty = Replace(sInterface, ".", "_") & "_" & sProperty
    Else
      If InStr(sProperty, "_") Then Return
    Endif
    
    $hObserver.Reply("v", [Object.GetProperty(Me, sProperty)])
    
  End With
  
Catch
  
  $hObserver.Error(Error.Text)
  
End

Private Sub GetAllProperties()
  
  Dim cVal As New Collection
  Dim sWantInterface As String
  Dim hClass As Class
  Dim sSymbol As String
  Dim sInterface As String
  Dim sPrefix As String
  
  With $hObserver.Message
  
    sWantInterface = .Arguments[0]
    
    hClass = Object.Class(Me)
    
    For Each sSymbol In hClass.Symbols
      With hClass[sSymbol]
        
        If .Kind <> Class.Property Then Continue
        If .Static Then Continue
      
        sPrefix = ""
        If $aInterface Then
          For Each sInterface In $aInterface
            sPrefix = LCase(Replace(sInterface, ".", "_") & "_")
            If LCase(sSymbol) Begins sPrefix And RInStr(sSymbol, "_") <= Len(sPrefix) Then Break
            sPrefix = ""
          Next
        Endif
    
        sSymbol = Mid$(sSymbol, Len(sPrefix) + 1)
        If InStr(sSymbol, "_") Then Continue
        
        If Not sPrefix Then sInterface = $sInterface
        
        If sInterface <> sWantInterface Then Continue
        
        cVal[sSymbol] = Object.GetProperty(Me, sSymbol)
        
      End With
    Next
      
    $hObserver.Reply("a{sv}", [cVal])
    
  End With
  
Catch
  
  $hObserver.Error(Error.Text)
  
End

Private Sub SetProperty()
  
  Dim sInterface As String
  Dim sProperty As String
  Dim vValue As Variant
  
  With $hObserver.Message
  
    sInterface = .Arguments[0]
    sProperty = .Arguments[1]
    vValue = .Arguments[2]
    
    If $aInterface And If sInterface <> $sInterface Then
      sProperty = Replace(sInterface, ".", "_") & "_" & sProperty
    Else
      If InStr(sProperty, "_") Then Return
    Endif
    
    Object.SetProperty(Me, sProperty, vValue)
    
  End With
  
Catch
  
  $hObserver.Error(Error.Text)
  
End


Public Sub DBusObserver_Message()
  
  Dim vVal As Variant
  Dim sMethod As String
  Dim sInterface As String
  
  sMethod = $hObserver.Message.Member
  sInterface = $hObserver.Message.Interface
  
  'Debug sInterface;; sMethod
  
  If InStr(sMethod, "_") Then Return
  
  If sInterface = "org.freedesktop.DBus.Introspectable" Or If Not sInterface Then
    If sMethod = "Introspect" Then
      $hObserver.Reply("s", [_Introspect()])
      Return
    Endif
  Endif
  
  If sInterface = "org.freedesktop.DBus.Properties" Or If Not sInterface Then
    If sMethod = "Get" Then
      GetProperty()
      Return
    Else If sMethod = "Set" Then
      SetProperty()
      Return
    Else If sMethod = "GetAll" Then
      GetAllProperties()
      Return
    Endif
  Endif
  
  If $aInterface And If sInterface <> $sInterface Then
    sMethod = Replace(sInterface, ".", "_") & "_" & sMethod
  Endif
  
  vVal = Object.Call(Me, sMethod, $hObserver.Message.Arguments)
  $hObserver.Reply(ConvType(Object.Class(Me)[sMethod].Type), [vVal])

Catch

  $hObserver.Error(Error.Text)
  
End
